From aea4eb5431dd86d08a14aca9b3000ae4fbc7ef95 Mon Sep 17 00:00:00 2001
From: Valentin Schneider <valentin.schneider@arm.com>
Date: Mon, 28 Feb 2022 10:29:47 +0000
Subject: [PATCH 5/7] ANDROID: mpam_policy: Support SCHED_RESET_ON_FORK for
 task partid

This requires hooking into the sched_fork() restricted vendor hook, so the
module can't be unloaded anymore.

Change-Id: Id26ef17a6dc26b70b274abe099775a86b39315a3
Signed-off-by: Valentin Schneider <Valentin.Schneider@arm.com>
Reviewed-by: Lukasz Luba <lukasz.luba@arm.com>
---
 kernel/sched/mpam_policy.c | 34 +++++++++++++++++++---------------
 1 file changed, 19 insertions(+), 15 deletions(-)

diff --git a/kernel/sched/mpam_policy.c b/kernel/sched/mpam_policy.c
index 5806b77dac4a..554e3db4cf0d 100644
--- a/kernel/sched/mpam_policy.c
+++ b/kernel/sched/mpam_policy.c
@@ -20,6 +20,7 @@
 #include <linux/user_namespace.h>
 
 #include <trace/hooks/fpsimd.h>
+#include <trace/hooks/sched.h>
 
 #include "sched.h"
 #include "../../drivers/android/mpam_arch.h"
@@ -369,9 +370,15 @@ static void mpam_kick_task(struct task_struct *p)
 		smp_call_function_single(task_cpu(p), mpam_sync_current, p, 1);
 }
 
-static void mpam_reset_partid(void __always_unused *info)
+static void mpam_hook_fork(void __always_unused *data,
+			   struct task_struct *p)
 {
-	mpam_write_partid(MPAM_PARTID_DEFAULT);
+	/*
+	 * The task isn't supposed to be runnable yet, so we don't have to issue
+	 * an mpam_sync_task() here.
+	 */
+	if (p->sched_reset_on_fork)
+		mpam_set_task_partid(p, MPAM_PARTID_DEFAULT);
 }
 
 static void mpam_hook_switch(void __always_unused *data,
@@ -392,13 +399,17 @@ static void mpam_hook_switch(void __always_unused *data,
 static_assert(MPAM_PARTID_DEFAULT == 0);
 static int mpam_policy_hooks_init(void)
 {
-	return register_trace_android_vh_is_fpsimd_save(mpam_hook_switch, NULL);
-}
+	int ret = 0;
 
-static void mpam_policy_hooks_exit(void)
-{
-	unregister_trace_android_vh_is_fpsimd_save(mpam_hook_switch, NULL);
-	on_each_cpu_cond_mask(NULL, mpam_reset_partid, NULL, true, cpu_present_mask);
+	ret = register_trace_android_vh_is_fpsimd_save(mpam_hook_switch, NULL);
+	if (ret)
+		return ret;
+
+	ret = register_trace_android_rvh_sched_fork(mpam_hook_fork, NULL);
+	if (ret)
+		unregister_trace_android_vh_is_fpsimd_save(mpam_hook_switch, NULL);
+
+	return ret;
 }
 
 static int __init mpam_policy_init(void)
@@ -416,11 +427,4 @@ static int __init mpam_policy_init(void)
 	return ret;
 }
 
-static void __exit mpam_policy_exit(void)
-{
-	mpam_policy_hooks_exit();
-	mpam_policy_fs_exit();
-}
-
 module_init(mpam_policy_init);
-module_exit(mpam_policy_exit);
-- 
2.34.1

