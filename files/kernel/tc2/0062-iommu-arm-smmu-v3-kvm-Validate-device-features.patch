From e09e295ec917dd9e9f9316acc35bf6e22d4adef4 Mon Sep 17 00:00:00 2001
From: Jean-Philippe Brucker <jean-philippe@linaro.org>
Date: Fri, 18 Feb 2022 18:05:35 +0000
Subject: [PATCH 62/97] iommu/arm-smmu-v3-kvm: Validate device features

In order to share stage-2 page tables with the host, we need address,
page and vmid sizes to be compatible. Check this, along with several
other features.

Signed-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
---
 .../iommu/arm/arm-smmu-v3/arm-smmu-v3-kvm.c   | 68 +++++++++++++++++++
 1 file changed, 68 insertions(+)

diff --git a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3-kvm.c b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3-kvm.c
index c977a908633d..b7db3e1f4db5 100644
--- a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3-kvm.c
+++ b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3-kvm.c
@@ -27,6 +27,71 @@ static bool kvm_arm_smmu_matched;
 
 static LIST_HEAD(smmus);
 
+static bool kvm_arm_smmu_validate_features(struct arm_smmu_device *smmu)
+{
+	unsigned long vmid_bits;
+	unsigned long reg, oas;
+	unsigned int required_features =
+		ARM_SMMU_FEAT_COHERENCY |
+		ARM_SMMU_FEAT_TRANS_S2 |
+		ARM_SMMU_FEAT_TT_LE;
+	unsigned int forbidden_features =
+		ARM_SMMU_FEAT_STALL_FORCE;
+	unsigned int keep_features =
+		ARM_SMMU_FEAT_2_LVL_STRTAB	|
+		ARM_SMMU_FEAT_2_LVL_CDTAB	|
+		ARM_SMMU_FEAT_TT_LE		|
+		ARM_SMMU_FEAT_SEV		|
+		ARM_SMMU_FEAT_COHERENCY		|
+		ARM_SMMU_FEAT_TRANS_S1		|
+		ARM_SMMU_FEAT_TRANS_S2		|
+		ARM_SMMU_FEAT_VAX		|
+		ARM_SMMU_FEAT_RANGE_INV;
+
+	if (smmu->options & ARM_SMMU_OPT_PAGE0_REGS_ONLY) {
+		dev_err(smmu->dev, "unsupported layout\n");
+		return false;
+	}
+
+	if (vabits_actual == 52)
+		required_features |= ARM_SMMU_FEAT_VAX;
+
+	if ((smmu->features & required_features) != required_features) {
+		dev_err(smmu->dev, "missing features 0x%x\n",
+			required_features & ~smmu->features);
+		return false;
+	}
+
+	if (smmu->features & forbidden_features) {
+		dev_err(smmu->dev, "features 0x%x forbidden\n",
+			smmu->features & forbidden_features);
+		return false;
+	}
+
+	smmu->features &= keep_features;
+
+	if (!(smmu->pgsize_bitmap & PAGE_SIZE)) {
+		dev_err(smmu->dev, "incompatible page size\n");
+		return false;
+	}
+
+	oas = get_kvm_ipa_limit();
+	if (smmu->oas < oas) {
+		dev_err(smmu->dev, "incompatible address size\n");
+		return false;
+	}
+
+	/* We can support bigger VMIDs than the CPU, but not smaller */
+	reg = read_sanitised_ftr_reg(SYS_ID_AA64MMFR1_EL1);
+	vmid_bits = get_vmid_bits(reg);
+	if (smmu->vmid_bits < vmid_bits) {
+		dev_err(smmu->dev, "incompatible vmid size\n");
+		return false;
+	}
+
+	return true;
+}
+
 static int kvm_arm_smmu_probe(struct platform_device *pdev)
 {
 	int ret;
@@ -72,6 +137,9 @@ static int kvm_arm_smmu_probe(struct platform_device *pdev)
 	if (ret)
 		return ret;
 
+	if (!kvm_arm_smmu_validate_features(smmu))
+		return -ENODEV;
+
 	platform_set_drvdata(pdev, host_smmu);
 
 	hyp_smmu->hyp.mmio_addr = ioaddr;
-- 
2.34.1

