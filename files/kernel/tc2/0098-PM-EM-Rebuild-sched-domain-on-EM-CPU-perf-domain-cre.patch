From eb16ce4b626982f9439d0d44a85d15d183b859df Mon Sep 17 00:00:00 2001
From: Ben Horgan <ben.horgan@arm.com>
Date: Tue, 20 Dec 2022 10:07:00 +0000
Subject: [PATCH 98/98] PM: EM: Rebuild sched domain on EM CPU perf domain
 creation

Without the rebuild, if the scheduling domain is built before all
the EM CPU domains are created then EAS will not be started.

Signed-off-by: Ben Horgan <ben.horgan@arm.com>
Change-Id: If721f10acfa9b2e0a8e84bc90a528e928ab53995
Upstream-Status: Unsuitable. Fix should be in governor code not EM.
---
 drivers/base/arch_topology.c   |  2 +-
 include/linux/sched/topology.h |  4 ++--
 kernel/power/energy_model.c    | 11 +++++++++++
 kernel/sched/topology.c        | 10 ++++++++--
 4 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/drivers/base/arch_topology.c b/drivers/base/arch_topology.c
index 694caa6614c8..345b6767b984 100644
--- a/drivers/base/arch_topology.c
+++ b/drivers/base/arch_topology.c
@@ -51,7 +51,7 @@ static void update_scale_freq_invariant(bool status)
 	 */
 	if (topology_scale_freq_invariant() == status) {
 		scale_freq_invariant = status;
-		rebuild_sched_domains_energy();
+		rebuild_sched_domains_energy(false);
 	}
 }
 
diff --git a/include/linux/sched/topology.h b/include/linux/sched/topology.h
index 775e77ee8951..ee3f7ef730e6 100644
--- a/include/linux/sched/topology.h
+++ b/include/linux/sched/topology.h
@@ -234,9 +234,9 @@ static inline bool cpus_share_cache(int this_cpu, int that_cpu)
 #endif	/* !CONFIG_SMP */
 
 #if defined(CONFIG_ENERGY_MODEL) && defined(CONFIG_CPU_FREQ_GOV_SCHEDUTIL)
-extern void rebuild_sched_domains_energy(void);
+extern void rebuild_sched_domains_energy(bool is_create);
 #else
-static inline void rebuild_sched_domains_energy(void)
+static inline void rebuild_sched_domains_energy(bool is_create)
 {
 }
 #endif
diff --git a/kernel/power/energy_model.c b/kernel/power/energy_model.c
index b2efe6c5fb2a..b08f9f44e5e9 100644
--- a/kernel/power/energy_model.c
+++ b/kernel/power/energy_model.c
@@ -251,6 +251,14 @@ struct em_perf_domain *em_cpu_get(int cpu)
 }
 EXPORT_SYMBOL_GPL(em_cpu_get);
 
+static void em_create_cpu_done_workfn(struct work_struct *work);
+static DECLARE_WORK(em_create_cpu_done_work, em_create_cpu_done_workfn);
+
+static void em_create_cpu_done_workfn(struct work_struct *work)
+{
+	rebuild_sched_domains_energy(true);
+}
+
 /**
  * em_dev_register_perf_domain() - Register the Energy Model (EM) for a device
  * @dev		: Device for which the EM is to register
@@ -339,6 +347,9 @@ int em_dev_register_perf_domain(struct device *dev, unsigned int nr_states,
 	em_debug_create_pd(dev);
 	dev_info(dev, "EM: created perf domain\n");
 
+	if (_is_cpu_device(dev))
+		schedule_work(&em_create_cpu_done_work);
+
 unlock:
 	mutex_unlock(&em_pd_mutex);
 	return ret;
diff --git a/kernel/sched/topology.c b/kernel/sched/topology.c
index 14be3c42e12e..069cdd47f2f3 100644
--- a/kernel/sched/topology.c
+++ b/kernel/sched/topology.c
@@ -216,8 +216,14 @@ unsigned int sysctl_sched_energy_aware = 1;
 DEFINE_MUTEX(sched_energy_mutex);
 bool sched_energy_update;
 
-void rebuild_sched_domains_energy(void)
+void rebuild_sched_domains_energy(bool is_create)
 {
+	/*
+	 * If the rebuild is scheduled due to creation of a perf
+	 * domain the work is already done if EAS is started.
+	 */
+	if (is_create && static_branch_unlikely(&sched_energy_present))
+		return;
 	mutex_lock(&sched_energy_mutex);
 	sched_energy_update = true;
 	rebuild_sched_domains();
@@ -238,7 +244,7 @@ int sched_energy_aware_handler(struct ctl_table *table, int write,
 	if (!ret && write) {
 		state = static_branch_unlikely(&sched_energy_present);
 		if (state != sysctl_sched_energy_aware)
-			rebuild_sched_domains_energy();
+			rebuild_sched_domains_energy(false);
 	}
 
 	return ret;
-- 
2.25.1

