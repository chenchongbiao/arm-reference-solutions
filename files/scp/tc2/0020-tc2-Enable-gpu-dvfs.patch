From 848a50ddc7f8d11edcb3c690e24bd6727513751c Mon Sep 17 00:00:00 2001
From: Ben Horgan <ben.horgan@arm.com>
Date: Wed, 21 Jun 2023 13:43:27 +0100
Subject: [PATCH 20/21] tc2: Enable gpu dvfs

Add the gpu operating points (opp) and add a gpu domain for the
scmi performance protocol.

Signed-off-by: Ben Horgan <ben.horgan@arm.com>
---
 product/tc2/include/clock_soc.h           |  2 +
 product/tc2/include/scp_mmap.h            |  1 +
 product/tc2/include/tc2_dvfs.h            |  1 +
 product/tc2/include/tc2_mock_psu.h        |  1 +
 product/tc2/include/tc2_psu.h             |  1 +
 product/tc2/include/tc2_timer.h           |  1 +
 product/tc2/scp_ramfw/config_clock.c      | 12 ++++++
 product/tc2/scp_ramfw/config_dvfs.c       | 45 +++++++++++++++++++++++
 product/tc2/scp_ramfw/config_mock_psu.c   | 14 +++++++
 product/tc2/scp_ramfw/config_psu.c        | 10 +++++
 product/tc2/scp_ramfw/config_scmi_perf.c  | 24 ++++++++++++
 product/tc2/scp_ramfw/config_system_pll.c | 13 +++++++
 12 files changed, 125 insertions(+)

diff --git a/product/tc2/include/clock_soc.h b/product/tc2/include/clock_soc.h
index 674932b8..16252d5f 100644
--- a/product/tc2/include/clock_soc.h
+++ b/product/tc2/include/clock_soc.h
@@ -30,6 +30,7 @@ enum clock_pll_idx {
     CLOCK_PLL_IDX_DPU,
     CLOCK_PLL_IDX_PIX0,
     CLOCK_PLL_IDX_PIX1,
+    CLOCK_PLL_IDX_GPU,
     CLOCK_PLL_IDX_COUNT
 };
 
@@ -114,6 +115,7 @@ enum clock_idx {
     CLOCK_IDX_DPU,
     CLOCK_IDX_PIXEL_0,
     CLOCK_IDX_PIXEL_1,
+    CLOCK_IDX_GPU,
     CLOCK_IDX_COUNT
 };
 
diff --git a/product/tc2/include/scp_mmap.h b/product/tc2/include/scp_mmap.h
index 233a822a..49325328 100644
--- a/product/tc2/include/scp_mmap.h
+++ b/product/tc2/include/scp_mmap.h
@@ -86,6 +86,7 @@
 
 #define SCP_PLL_BASE         (SCP_SOC_EXPANSION3_BASE + 0x03000000)
 #define SCP_PLL_SYSPLL       (SCP_PLL_BASE + 0x00000000)
+#define SCP_PLL_GPU          (SCP_PLL_BASE + 0x00000008)
 #define SCP_PLL_DISPLAY      (SCP_PLL_BASE + 0x00000014)
 #define SCP_PLL_PIX0         (SCP_PLL_BASE + 0x00000018)
 #define SCP_PLL_PIX1         (SCP_PLL_BASE + 0x0000001C)
diff --git a/product/tc2/include/tc2_dvfs.h b/product/tc2/include/tc2_dvfs.h
index 75e079ab..47ca33cc 100644
--- a/product/tc2/include/tc2_dvfs.h
+++ b/product/tc2/include/tc2_dvfs.h
@@ -18,6 +18,7 @@ enum dvfs_element_idx {
     DVFS_ELEMENT_IDX_HUNTER_ELP_MIN,
 #endif
     DVFS_ELEMENT_IDX_HUNTER_ELP,
+    DVFS_ELEMENT_IDX_GPU,
     DVFS_ELEMENT_IDX_COUNT
 };
 
diff --git a/product/tc2/include/tc2_mock_psu.h b/product/tc2/include/tc2_mock_psu.h
index a571ca3a..1a170810 100644
--- a/product/tc2/include/tc2_mock_psu.h
+++ b/product/tc2/include/tc2_mock_psu.h
@@ -18,6 +18,7 @@ enum mock_psu_id {
     MOCK_PSU_ELEMENT_IDX_HUNTER_ELP_MIN,
 #endif
     MOCK_PSU_ELEMENT_IDX_HUNTER_ELP,
+    MOCK_PSU_ELEMENT_IDX_GPU,
     MOCK_PSU_ELEMENT_IDX_COUNT,
 };
 
diff --git a/product/tc2/include/tc2_psu.h b/product/tc2/include/tc2_psu.h
index 16288053..9354396b 100644
--- a/product/tc2/include/tc2_psu.h
+++ b/product/tc2/include/tc2_psu.h
@@ -18,6 +18,7 @@ enum psu_id {
     PSU_ELEMENT_IDX_HUNTER_ELP_MIN,
 #endif
     PSU_ELEMENT_IDX_HUNTER_ELP,
+    PSU_ELEMENT_IDX_GPU,
     PSU_ELEMENT_IDX_COUNT,
 };
 
diff --git a/product/tc2/include/tc2_timer.h b/product/tc2/include/tc2_timer.h
index 2436163f..4679f080 100644
--- a/product/tc2/include/tc2_timer.h
+++ b/product/tc2/include/tc2_timer.h
@@ -15,6 +15,7 @@ enum config_timer_refclk_sub_element_idx {
     TC2_CONFIG_TIMER_DVFS_CPU_HUNTER_ELP_MIN,
 #endif
     TC2_CONFIG_TIMER_DVFS_CPU_HUNTER_ELP,
+    TC2_CONFIG_TIMER_DVFS_GPU,
 #ifdef BUILD_HAS_SCMI_PERF_FAST_CHANNELS
     TC2_CONFIG_TIMER_FAST_CHANNEL_TIMER_IDX,
 #endif
diff --git a/product/tc2/scp_ramfw/config_clock.c b/product/tc2/scp_ramfw/config_clock.c
index 4587045f..8855e141 100644
--- a/product/tc2/scp_ramfw/config_clock.c
+++ b/product/tc2/scp_ramfw/config_clock.c
@@ -120,6 +120,18 @@ static const struct fwk_element clock_dev_desc_table[CLOCK_IDX_COUNT + 1] = {
                     MOD_SYSTEM_PLL_API_TYPE_DEFAULT),
             }),
         },
+    [CLOCK_IDX_GPU] =
+        {
+            .name = "GPU",
+            .data = &((struct mod_clock_dev_config){
+                .driver_id = FWK_ID_ELEMENT_INIT(
+                    FWK_MODULE_IDX_SYSTEM_PLL,
+                    CLOCK_PLL_IDX_GPU),
+                .api_id = FWK_ID_API_INIT(
+                    FWK_MODULE_IDX_SYSTEM_PLL,
+                    MOD_SYSTEM_PLL_API_TYPE_DEFAULT),
+            }),
+        },
     { 0 }, /* Termination description. */
 };
 
diff --git a/product/tc2/scp_ramfw/config_dvfs.c b/product/tc2/scp_ramfw/config_dvfs.c
index ec1592e1..4d9c69a8 100644
--- a/product/tc2/scp_ramfw/config_dvfs.c
+++ b/product/tc2/scp_ramfw/config_dvfs.c
@@ -174,6 +174,30 @@ static struct mod_dvfs_opp operating_points_hunter_elp[6] = {
     { 0 }
 };
 
+static struct mod_dvfs_opp operating_points_gpu[5] = {
+    {
+        .level = 350 * 1000000UL,
+        .frequency = 350 * FWK_KHZ,
+        .voltage = 550,
+    },
+    {
+        .level = 680 * 1000000UL,
+        .frequency = 680 * FWK_KHZ,
+        .voltage = 650,
+    },
+    {
+        .level = 1000 * 1000000UL,
+        .frequency = 1000 * FWK_KHZ,
+        .voltage = 750,
+    },
+    {
+        .level = 1260 * 1000000UL,
+        .frequency = 1260 * FWK_KHZ,
+        .voltage = 850,
+    },
+    { 0 }
+};
+
 static const struct mod_dvfs_domain_config cpu_group_hayes = {
     .psu_id = FWK_ID_ELEMENT_INIT(FWK_MODULE_IDX_PSU, PSU_ELEMENT_IDX_HAYES),
     .clock_id =
@@ -236,6 +260,22 @@ static const struct mod_dvfs_domain_config cpu_group_hunter_elp = {
     .opps = operating_points_hunter_elp,
 };
 
+static const struct mod_dvfs_domain_config gpu = {
+    .psu_id =
+        FWK_ID_ELEMENT_INIT(FWK_MODULE_IDX_PSU, PSU_ELEMENT_IDX_GPU),
+    .clock_id = FWK_ID_ELEMENT_INIT(
+        FWK_MODULE_IDX_CLOCK,
+        CLOCK_IDX_GPU),
+    .alarm_id = FWK_ID_SUB_ELEMENT_INIT(
+        FWK_MODULE_IDX_TIMER,
+        0,
+        TC2_CONFIG_TIMER_DVFS_GPU),
+    .retry_ms = 1,
+    .latency = 1200,
+    .sustained_idx = 2,
+    .opps = operating_points_gpu,
+};
+
 static const struct fwk_element element_table[DVFS_ELEMENT_IDX_COUNT + 1] = {
     [DVFS_ELEMENT_IDX_HAYES] =
         {
@@ -259,6 +299,11 @@ static const struct fwk_element element_table[DVFS_ELEMENT_IDX_COUNT + 1] = {
             .name = "CPU_GROUP_HUNTER_ELP",
             .data = &cpu_group_hunter_elp,
         },
+    [DVFS_ELEMENT_IDX_GPU] =
+        {
+            .name = "GPU",
+            .data = &gpu,
+        },
     { 0 },
 };
 
diff --git a/product/tc2/scp_ramfw/config_mock_psu.c b/product/tc2/scp_ramfw/config_mock_psu.c
index 1f7bdabc..c7d299ae 100644
--- a/product/tc2/scp_ramfw/config_mock_psu.c
+++ b/product/tc2/scp_ramfw/config_mock_psu.c
@@ -71,6 +71,20 @@ static const struct fwk_element element_table[MOCK_PSU_ELEMENT_IDX_COUNT + 1] =
                 .default_voltage = 550,
             },
     },
+    [MOCK_PSU_ELEMENT_IDX_GPU] = {
+        .name = "DVFS_GROUP_GPU",
+        .data =
+            &(const struct mod_mock_psu_element_cfg){
+                .async_alarm_id = FWK_ID_NONE_INIT,
+                .async_alarm_api_id = FWK_ID_NONE_INIT,
+
+                .async_response_id = FWK_ID_NONE_INIT,
+                .async_response_api_id = FWK_ID_NONE_INIT,
+
+                .default_enabled = true,
+                .default_voltage = 550,
+            },
+    },
     { 0 }
 };
 
diff --git a/product/tc2/scp_ramfw/config_psu.c b/product/tc2/scp_ramfw/config_psu.c
index 2d34e20e..5a341810 100644
--- a/product/tc2/scp_ramfw/config_psu.c
+++ b/product/tc2/scp_ramfw/config_psu.c
@@ -58,6 +58,16 @@ static const struct fwk_element element_table[PSU_ELEMENT_IDX_COUNT + 1] = {
                     FWK_MODULE_IDX_MOCK_PSU,
                     MOD_MOCK_PSU_API_IDX_DRIVER) },
     },
+    [PSU_ELEMENT_IDX_GPU] = {
+        .name = "PSU_GROUP_GPU",
+        .data =
+            &(const struct mod_psu_element_cfg){
+                .driver_id = FWK_ID_ELEMENT_INIT(FWK_MODULE_IDX_MOCK_PSU,
+                    MOCK_PSU_ELEMENT_IDX_GPU),
+                .driver_api_id = FWK_ID_API_INIT(
+                    FWK_MODULE_IDX_MOCK_PSU,
+                    MOD_MOCK_PSU_API_IDX_DRIVER) },
+    },
     { 0 }
 };
 
diff --git a/product/tc2/scp_ramfw/config_scmi_perf.c b/product/tc2/scp_ramfw/config_scmi_perf.c
index f3b5c3be..5c831b27 100644
--- a/product/tc2/scp_ramfw/config_scmi_perf.c
+++ b/product/tc2/scp_ramfw/config_scmi_perf.c
@@ -152,6 +152,30 @@ static const struct mod_scmi_perf_domain_config
             [MOD_SCMI_PERF_FAST_CHANNEL_LIMIT_GET] =
                 FC_LIMIT_GET_AP_ADDR(DVFS_ELEMENT_IDX_HUNTER_ELP),
         },
+#endif
+        },
+        [DVFS_ELEMENT_IDX_GPU] = {
+#ifdef BUILD_HAS_SCMI_PERF_FAST_CHANNELS
+         .fast_channels_addr_scp = (uint64_t[]) {
+            [MOD_SCMI_PERF_FAST_CHANNEL_LEVEL_SET] =
+                FC_LEVEL_SET_ADDR(DVFS_ELEMENT_IDX_GPU),
+            [MOD_SCMI_PERF_FAST_CHANNEL_LIMIT_SET] =
+                FC_LIMIT_SET_ADDR(DVFS_ELEMENT_IDX_GPU),
+            [MOD_SCMI_PERF_FAST_CHANNEL_LEVEL_GET] =
+                FC_LEVEL_GET_ADDR(DVFS_ELEMENT_IDX_GPU),
+            [MOD_SCMI_PERF_FAST_CHANNEL_LIMIT_GET] =
+                FC_LIMIT_GET_ADDR(DVFS_ELEMENT_IDX_GPU),
+        },
+         .fast_channels_addr_ap = (uint64_t[]) {
+            [MOD_SCMI_PERF_FAST_CHANNEL_LEVEL_SET] =
+                FC_LEVEL_SET_AP_ADDR(DVFS_ELEMENT_IDX_GPU),
+            [MOD_SCMI_PERF_FAST_CHANNEL_LIMIT_SET] =
+                FC_LIMIT_SET_AP_ADDR(DVFS_ELEMENT_IDX_GPU),
+            [MOD_SCMI_PERF_FAST_CHANNEL_LEVEL_GET] =
+                FC_LEVEL_GET_AP_ADDR(DVFS_ELEMENT_IDX_GPU),
+            [MOD_SCMI_PERF_FAST_CHANNEL_LIMIT_GET] =
+                FC_LIMIT_GET_AP_ADDR(DVFS_ELEMENT_IDX_GPU),
+        },
 #endif
         },
     };
diff --git a/product/tc2/scp_ramfw/config_system_pll.c b/product/tc2/scp_ramfw/config_system_pll.c
index a0da05c8..fd05c86a 100644
--- a/product/tc2/scp_ramfw/config_system_pll.c
+++ b/product/tc2/scp_ramfw/config_system_pll.c
@@ -142,6 +142,19 @@ static const struct fwk_element system_pll_element_table[
                         .defer_initialization = false,
                     }),
             },
+        [CLOCK_PLL_IDX_GPU] =
+            {
+                .name = "GPU_PLL",
+                .data = &((struct mod_system_pll_dev_config){
+                    .control_reg = (void *)SCP_PLL_GPU,
+                    .status_reg = NULL,
+                    .initial_rate = 800 * FWK_MHZ,
+                    .min_rate = MOD_SYSTEM_PLL_MIN_RATE,
+                    .max_rate = MOD_SYSTEM_PLL_MAX_RATE,
+                    .min_step = MOD_SYSTEM_PLL_MIN_INTERVAL,
+                    .defer_initialization = false,
+                }),
+            },
         [CLOCK_PLL_IDX_COUNT] = { 0 }, /* Termination description. */
     };
 
-- 
2.25.1

