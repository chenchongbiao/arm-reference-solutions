From 91f53fe64ce780b9c1969b8bbf06d061f754ff9d Mon Sep 17 00:00:00 2001
From: Usama Arif <usama.arif@arm.com>
Date: Tue, 15 Jun 2021 17:02:08 +0100
Subject: [PATCH 05/18] mod/cmn_booker: program MTU node for CMN

Signed-off-by: Usama Arif <usama.arif@arm.com>
Change-Id: Ide353c8038b78a2b3b0c78d52479ed2fb92c4309
---
 module/cmn_booker/src/cmn_booker.h     | 73 ++++++++++++++++++++++++++
 module/cmn_booker/src/mod_cmn_booker.c | 38 ++++++++++++++
 2 files changed, 111 insertions(+)

diff --git a/module/cmn_booker/src/cmn_booker.h b/module/cmn_booker/src/cmn_booker.h
index 0514f53b..c0379de8 100644
--- a/module/cmn_booker/src/cmn_booker.h
+++ b/module/cmn_booker/src/cmn_booker.h
@@ -184,6 +184,79 @@ struct cmn_booker_hni_reg {
     FWK_RW uint64_t ERRMISC_NS;
 };
 
+/*
+ * SBSX registers
+ */
+struct cmn_booker_sbsx_reg {
+  FWK_R  uint64_t     NODE_INFO;     /*Offset :  0x0 */
+  FWK_R  uint64_t     RESERVED0[15];          /*Offset :  0x8 - 0x78  */
+  FWK_R  uint64_t     CHILD_INFO;    /*Offset :  0x80 */
+  FWK_R  uint64_t     RESERVED1[271];         /*Offset :  0x88 - 0x8f8  */
+  FWK_R  uint64_t     UNIT_INFO;     /*Offset :  0x900 */
+  FWK_R  uint64_t     RESERVED2[31];          /*Offset :  0x908 - 0x9f8  */
+  FWK_RW uint64_t     CFG_CTL;       /*Offset :  0xa00 */
+  FWK_RW uint64_t     AUX_CTL;       /*Offset :  0xa08 */
+  FWK_R  uint64_t     RESERVED3[702];         /*Offset :  0xa10 - 0x1ff8  */
+  FWK_RW uint64_t     PMU_EVENT_SEL; /*Offset :  0x2000 */
+  FWK_R  uint64_t     RESERVED4[511];         /*Offset :  0x2008 - 0x2ff8  */
+  FWK_R  uint64_t     ERRFR;         /*Offset :  0x3000 */
+  FWK_RW uint64_t     ERRCTLR;       /*Offset :  0x3008 */
+  FWK_W  uint64_t     ERRSTATUS;     /*Offset :  0x3010 */
+  FWK_RW uint64_t     ERRADDR;       /*Offset :  0x3018 */
+  FWK_RW uint64_t     ERRMISC;       /*Offset :  0x3020 */
+  FWK_R  uint64_t     RESERVED5[27];          /*Offset :  0x3028 - 0x30f8  */
+  FWK_R  uint64_t     ERRFR_NS;      /*Offset :  0x3100 */
+  FWK_RW uint64_t     ERRCTLR_NS;    /*Offset :  0x3108 */
+  FWK_W  uint64_t     ERRSTATUS_NS;  /*Offset :  0x3110 */
+  FWK_RW uint64_t     ERRADDR_NS;    /*Offset :  0x3118 */
+  FWK_RW uint64_t     ERRMISC_NS;    /*Offset :  0x3120 */
+};
+
+
+/*
+ * MTSX registers
+ */
+struct cmn_booker_mtsx_reg {
+  FWK_R   uint64_t    NODE_INFO;                                 /*!< Offset: 0x0    */
+  FWK_R   uint64_t    RESERVED0[15];                                     /*!< Offset: 0x8    */
+  FWK_R   uint64_t    CHILD_INFO;                                /*!< Offset: 0x80   */
+  FWK_R   uint64_t    RESERVED1[271];                                    /*!< Offset: 0x88   */
+  FWK_R   uint64_t    UNIT_INFO;                                 /*!< Offset: 0x900  */
+  FWK_R   uint64_t    RESERVED2[15];                                     /*!< Offset: 0x908  */
+  FWK_RW  uint64_t    SECURE_REGISTER_GROUPS_OVERRIDE;           /*!< Offset: 0x980  */
+  FWK_R   uint64_t    RESERVED3[15];                                     /*!< Offset: 0x988  */
+  FWK_RW  uint64_t    CFG_CTL;                                   /*!< Offset: 0xa00  */
+  FWK_RW  uint64_t    AUX_CTL;                                   /*!< Offset: 0xa08  */
+  FWK_R   uint64_t    RESERVED4[4];                                      /*!< Offset: 0xa10  */
+  FWK_RW  uint64_t    TC_FLUSH_PR;                               /*!< Offset: 0xa30  */
+  FWK_R   uint64_t    TC_FLUSH_SR;                               /*!< Offset: 0xa38  */
+  FWK_RW  uint64_t    TAG_ADDR_CTL;                              /*!< Offset: 0xa40  */
+  FWK_RW  uint64_t    TAG_ADDR_BASE;                             /*!< Offset: 0xa48  */
+  FWK_RW  uint64_t    TAG_ADDR_SHUTTER0;                         /*!< Offset: 0xa50  */
+  FWK_RW  uint64_t    TAG_ADDR_SHUTTER1;                         /*!< Offset: 0xa58  */
+  FWK_RW  uint64_t    TAG_ADDR_SHUTTER2;                         /*!< Offset: 0xa60  */
+  FWK_R   uint64_t    RESERVED5[35];                                     /*!< Offset: 0xa68  */
+  FWK_RW  uint64_t    CFG_TC_DBGRD;                              /*!< Offset: 0xb80  */
+  FWK_R   uint64_t    TC_CACHE_ACCESS_TC_CTL;                    /*!< Offset: 0xb88  */
+  FWK_R   uint64_t    TC_CACHE_ACCESS_TC_DATA;                   /*!< Offset: 0xb98  */
+  FWK_R   uint64_t    RESERVED6[652];                                    /*!< Offset: 0xba0  */
+  FWK_RW  uint64_t    PMU_EVENT_SEL;                             /*!< Offset: 0x2000 */
+  FWK_R   uint64_t    RESERVED7[511];                                    /*!< Offset: 0x2008 */
+  FWK_R   uint64_t    ERRFR;                                     /*!< Offset: 0x3000 */
+  FWK_RW  uint64_t    ERRCTLR;                                   /*!< Offset: 0x3008 */
+  FWK_RW  uint64_t    ERRSTATUS;                                 /*!< Offset: 0x3010 */
+  FWK_RW  uint64_t    ERRADDR;                                   /*!< Offset: 0x3018 */
+  FWK_RW  uint64_t    ERRMISC;                                   /*!< Offset: 0x3020 */
+  FWK_R   uint64_t    RESERVED8[27];                                     /*!< Offset: 0x3028 */
+  FWK_R   uint64_t    ERRFR_NS;                                  /*!< Offset: 0x3100 */
+  FWK_RW  uint64_t    ERRCTLR_NS;                                /*!< Offset: 0x3108 */
+  FWK_RW  uint64_t    ERRSTATUS_NS;                              /*!< Offset: 0x3110 */
+  FWK_RW  uint64_t    ERRADDR_NS;                                /*!< Offset: 0x3118 */
+  FWK_RW  uint64_t    ERRMISC_NS;                                /*!< Offset: 0x3120 */
+  FWK_RW  uint64_t    ERR_INJ;                                   /*!< Offset: 0x3130 */
+};
+
+
 #define CMN_BOOKER_NODE_INFO_TYPE           UINT64_C(0x000000000000FFFF)
 #define CMN_BOOKER_NODE_INFO_ID             UINT64_C(0x00000000FFFF0000)
 #define CMN_BOOKER_NODE_INFO_ID_POS         16
diff --git a/module/cmn_booker/src/mod_cmn_booker.c b/module/cmn_booker/src/mod_cmn_booker.c
index 3d1a841e..397c7687 100644
--- a/module/cmn_booker/src/mod_cmn_booker.c
+++ b/module/cmn_booker/src/mod_cmn_booker.c
@@ -293,6 +293,44 @@ static void cmn_booker_configure(void)
                     struct cmn_booker_hni_reg* hni_node =
                         (struct cmn_booker_hni_reg*) node;
                     hni_node->CFG_CTL &= ~1;
+                } else if (node_type == NODE_TYPE_SBSX) {
+                    struct cmn_booker_sbsx_reg* sbsx_node =
+                        (struct cmn_booker_sbsx_reg*) node;
+                    FWK_LOG_INFO(MOD_NAME "sbsx CFG_CTL %p val %x%x\n", &sbsx_node->CFG_CTL, HIGH_WORD(sbsx_node->CFG_CTL), LOW_WORD(sbsx_node->CFG_CTL));
+
+                    sbsx_node->CFG_CTL = 0xf;
+                    FWK_LOG_INFO(MOD_NAME "sbsx CFG_CTL %p val %x%x\n", &sbsx_node->CFG_CTL, HIGH_WORD(sbsx_node->CFG_CTL), LOW_WORD(sbsx_node->CFG_CTL));
+                } else if (node_type == NODE_TYPE_MTU) {
+#if !defined(DISABLE_MTE)
+                    FWK_LOG_WARN(MOD_NAME "MTE Enabled");
+                    struct cmn_booker_mtsx_reg* mtsx_node =
+                        (struct cmn_booker_mtsx_reg*) node;
+
+#if defined(DISABLE_MTE_TC)
+                    FWK_LOG_INFO(MOD_NAME "mtsx AUX_CTL %p val %x%x\n", &mtsx_node->AUX_CTL, HIGH_WORD(mtsx_node->AUX_CTL), LOW_WORD(mtsx_node->AUX_CTL));
+                    mtsx_node->AUX_CTL |= 0x1; // This disables tag cache
+                    FWK_LOG_INFO(MOD_NAME "mtsx AUX_CTL %p val %x%x\n", &mtsx_node->AUX_CTL, HIGH_WORD(mtsx_node->AUX_CTL), LOW_WORD(mtsx_node->AUX_CTL));
+                    FWK_LOG_WARN(MOD_NAME "MTE Tag cache disabled");
+#endif
+                    /* Write the PA to DA Address Conversion control;
+                     * Map Mode is 2'b10 (Infra) as like shuttering is hard coded in DMC
+                     */
+                    FWK_LOG_INFO(MOD_NAME "mtsx TAG_ADDR_CTL %p val %x%x\n", &mtsx_node->TAG_ADDR_CTL, HIGH_WORD(mtsx_node->TAG_ADDR_CTL), LOW_WORD(mtsx_node->TAG_ADDR_CTL));
+                    mtsx_node->TAG_ADDR_CTL = 0x02;
+                    FWK_LOG_INFO(MOD_NAME "mtsx TAG_ADDR_CTL %p val %x%x\n", &mtsx_node->TAG_ADDR_CTL, HIGH_WORD(mtsx_node->TAG_ADDR_CTL), LOW_WORD(mtsx_node->TAG_ADDR_CTL));
+
+                    /* Programming the Tag Memory area for MTE tests;
+                     * Top 31/32th of 8GB of the DRAM space is selected
+                     */
+                    FWK_LOG_INFO(MOD_NAME "mtsx TAG_ADDR_BASE %p val %x%x\n", &mtsx_node->TAG_ADDR_BASE, HIGH_WORD(mtsx_node->TAG_ADDR_BASE), LOW_WORD(mtsx_node->TAG_ADDR_BASE));
+                    mtsx_node->TAG_ADDR_BASE = 0x81F0000000;
+                    FWK_LOG_INFO(MOD_NAME "mtsx TAG_ADDR_BASE %p val %x%x\n", &mtsx_node->TAG_ADDR_BASE, HIGH_WORD(mtsx_node->TAG_ADDR_BASE), LOW_WORD(mtsx_node->TAG_ADDR_BASE));
+
+                    /* Wrire the Tag Addr shutter0/1/2 register */
+                    mtsx_node->TAG_ADDR_SHUTTER0 = 0x2222222222222200;
+                    mtsx_node->TAG_ADDR_SHUTTER1 = 0x2222222222222222;
+                    mtsx_node->TAG_ADDR_SHUTTER2 = 0x2222222222222222;
+#endif
                 }
             }
         }
-- 
2.25.1

